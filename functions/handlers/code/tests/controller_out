Login
Create Code Run
200
OK
{ name: 'new Code 1',
  description: 'just a new code',
  username: 'user5',
  appId: 'appId value',
  objId: 'objId value',
  code: 'code value',
  folder: 'folder value',
  type: 'type value',
  createdAt: 'Sun, 26 Jan 2020 18:28:32 GMT',
  createdAtTimestamp: 1580063312130,
  id: 'VMSkyMadzi5ufS0Z7wXq' }
Get Codes Run
200
OK
[ { id: 'VMSkyMadzi5ufS0Z7wXq',
    name: 'new Code 1',
    objId: 'objId value',
    appId: 'appId value',
    type: 'type value',
    createdAtTimestamp: 1580063312130,
    username: 'user5',
    createdAt: 'Sun, 26 Jan 2020 18:28:32 GMT',
    description: 'just a new code',
    code: 'code value',
    folder: 'folder value' },
  { id: '1sMPUl5J9zrKeBL6JJNr',
    folder: 'src/',
    name: 'App.js',
    objId: '',
    appId: '4jOfLfzb0vUIptM0mBo1',
    type: 'appjs',
    createdAtTimestamp: 1580062794255,
    username: 'user5',
    createdAt: 'Sun, 26 Jan 2020 18:19:54 GMT',
    description: 'appjs',
    code:
     'import React from "react";\nimport { BrowserRouter as Router, Switch, Route } from "react-router-dom";\nimport "./App.css";\n\n//Components\nimport Navbar from "./components/nav/Navbar";\nimport Alerts from "./components/alerts/Alerts";\n\n//Routes\nimport Home from "./routes/Home";\nimport Login from "./routes/Login";\nimport Logout from "./routes/Logout";\nimport Signup from "./routes/Signup";\n    \n//Project\nimport projectAll from "./routes/project/projectAll";\nimport projectView from "./routes/project/projectView";\nimport projectCreate from "./routes/project/projectCreate";\nimport projectEdit from "./routes/project/projectEdit";\n    \n//Todo\nimport todoAll from "./routes/todo/todoAll";\nimport todoView from "./routes/todo/todoView";\nimport todoCreate from "./routes/todo/todoCreate";\nimport todoEdit from "./routes/todo/todoEdit";\n\n//Redux\nimport { Provider } from "react-redux";\nimport store from "./redux/store";\nimport { SET_AUTH } from "./redux/types";\nimport { getUserData } from "./redux/actions/userActions";\n\n//Auth\nimport jwtDecode from "jwt-decode";\nimport axios from "axios";\n\naxios.defaults.baseURL = "http://apiurl";\n\nconst token = localStorage.FBIdToken;\nif (token) {\n  const decodedToken = jwtDecode(token);\n  //console.log(decodedToken);\n  if (decodedToken.exp * 1000 < Date.now()) {\n    //Expired token\n    //window.location.href = \'/login\';\n    //store.dispatch(logoutUser());\n    //window.location.href = \'/\';\n  } else {\n    store.dispatch({ type: SET_AUTH });\n    axios.defaults.headers.common["Authorization"] = token;\n    store.dispatch(getUserData());\n  }\n}\n\nfunction App() {\n  return (\n    <div className="App">\n      <Provider store={store}>\n        <Router>\n          <Navbar />\n          <div className="container">\n            <Alerts />\n            <Switch>\n              <Route exact path="/" component={Home} />\n              <Route exact path="/login" component={Login} />\n              <Route exact path="/logout" component={Logout} />\n              <Route exact path="/signup" component={Signup} />\n              <Route exact path="/project" component={projectAll} />\n              <Route exact path="/project/create" component={projectCreate} />\n              <Route exact path="/project/:id" component={projectView} />\n              <Route exact path="/project/edit/:id" component={projectEdit} />\n              <Route exact path="/todo" component={todoAll} />\n              <Route exact path="/todo/create" component={todoCreate} />\n              <Route exact path="/todo/:id" component={todoView} />\n              <Route exact path="/todo/edit/:id" component={todoEdit} />\n  \n            </Switch>\n          </div>\n        </Router>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n' },
  { id: 'h2CLsgLvMcXaZhTvchqv',
    description: 'object actions',
    code:
     'import React, { Component, Fragment } from "react";\nimport PropTypes from "prop-types";\nimport { connect } from "react-redux";\n\n//Components\nimport SimpleCard from "../../view/SimpleCard";\n\n//Material UI\nimport withStyles from "@material-ui/core/styles/withStyles";\n\nconst styles = {};\n\nclass AllProject extends Component {\n  render() {\n    const projects = this.props.projects;\n    return (\n      <Fragment>\n        {projects &&\n          projects.length > 0 &&\n          projects.map(project => {\n            if (project.status !== "done") {\n              const topHeader = project.username;\n              const title = project.name;\n              const subTitle = project.status;\n              const content = "";\n              const link = {\n                title: "Open Project",\n                url: `/project/${project.id}`\n              };\n              return (\n                <SimpleCard\n                  key={project.id}\n                  topHeader={topHeader}\n                  title={title}\n                  subTitle={subTitle}\n                  content={content}\n                  link={link}\n                />\n              );\n            }\n            return <Fragment key={project.id}></Fragment>;\n          })}\n      </Fragment>\n    );\n  }\n}\n\nAllProject.propTypes = {\n  classes: PropTypes.object.isRequired,\n  projects: PropTypes.array.isRequired\n};\n\nconst mapStateToProps = state => ({});\n\nexport default connect(mapStateToProps, null)(withStyles(styles)(AllProject));\n',
    folder: 'src/components/app/project/',
    name: 'AllProject.js',
    objId: '',
    appId: '4jOfLfzb0vUIptM0mBo1',
    type: 'components',
    createdAtTimestamp: 1580062792865,
    username: 'user5',
    createdAt: 'Sun, 26 Jan 2020 18:19:52 GMT' },
  { id: 'TH5pYpoxfY8ogoQ1P1Tg',
    description: 'object actions',
    code:
     'import React, { Component } from "react";\nimport PropTypes from "prop-types";\nimport { Link } from "react-router-dom";\nimport { connect } from "react-redux";\n\n//Components\nimport ErrorMessages from "../../error/ErrorMessages";\n\n//Material UI\nimport withStyles from "@material-ui/core/styles/withStyles";\nimport Grid from "@material-ui/core/Grid";\nimport TextField from "@material-ui/core/TextField";\nimport Button from "@material-ui/core/Button";\nimport CircularProgress from "@material-ui/core/CircularProgress";\n\n//Quill\nimport ReactQuill from "react-quill";\nimport QuillSettings from "../../quill/QuillSettings";\nimport "react-quill/dist/quill.snow.css";\n\nconst styles = {\n  textField: {\n    marginTop: "20px"\n  },\n  progress: {\n    position: "absolute"\n  },\n  submitButton: {\n    marginRight: "10px"\n  },\n  richText: {\n    marginTop: "20px"\n  }\n};\n\nclass CreateTodo extends Component {\n  constructor() {\n    super();\n    this.state = {\n      name: "",\n      description: "",\n      descriptionDelta: [],\n        status: "",\n\n    };\n  }\n  handleChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n  handleSubmit = async event => {\n    event.preventDefault();\n    const data = {\n      name: this.state.name,\n      description: this.state.description,\n      descriptionDelta: this.state.descriptionDelta,\n      status: this.state.status,\n\n    };\n    await this.props.createTodo(data);\n  };\n  handleCancel = async event => {};\n\n  handleQuillChange(value, delta, source, editor) {\n    this.setState({\n      description: editor.getHTML(),\n      descriptionDelta: editor.getContents()\n    });\n  }\n  render() {\n    const classes = this.props.classes;\n    const loading = this.props.loading;\n    const error = this.props.error;\n    return (\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <TextField\n            className={classes.textField}\n            name="name"\n            autoComplete="off"\n            label="Name"\n            variant="outlined"\n            onChange={this.handleChange}\n            fullWidth\n          />\n          <ReactQuill\n            className={classes.richText}\n            value={this.state.description}\n            modules={QuillSettings.modules}\n            formats={QuillSettings.formats}\n            name="description"\n            placeholder="Description"\n            onChange={this.handleQuillChange.bind(this)}\n          />\n          <TextField\n            className={classes.textField}\n            name="status"\n            autoComplete="off"\n            label="Status"\n            variant="outlined"\n            onChange={this.handleChange}\n            fullWidth\n          />\n\n        </Grid>\n        <Grid item xs={12}>\n          <Button\n            className={classes.submitButton}\n            variant="contained"\n            color="primary"\n            disabled={loading}\n            onClick={this.handleSubmit}\n          >\n            Submit\n            {loading && (\n              <CircularProgress size={30} className={classes.progress} />\n            )}\n          </Button>\n          <Button\n            variant="contained"\n            color="secondary"\n            component={Link}\n            to={`/todo`}>\n            Cancel\n          </Button>\n        </Grid>\n        <Grid item xs={12}>\n          <ErrorMessages error={error} />\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nCreateTodo.propTypes = {\n  classes: PropTypes.object.isRequired,\n  error: PropTypes.object.isRequired,\n  createTodo: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({});\n\nexport default connect(mapStateToProps, null)(withStyles(styles)(CreateTodo));\n',
    folder: 'src/components/app/todo/',
    name: 'CreateTodo.js',
    objId: '',
    appId: '4jOfLfzb0vUIptM0mBo1',
    type: 'actions',
    createdAtTimestamp: 1580062792865,
    username: 'user5',
    createdAt: 'Sun, 26 Jan 2020 18:19:52 GMT' },
  { id: 'LNn4xCPp3uNn3TC6vQQV',
    name: 'ViewTodo.js',
    objId: '',
    appId: '4jOfLfzb0vUIptM0mBo1',
    type: 'components',
    createdAtTimestamp: 1580062792865,
    username: 'user5',
    createdAt: 'Sun, 26 Jan 2020 18:19:52 GMT',
    description: 'object actions',
    code:
     'import React, { Component } from "react";\nimport PropTypes from "prop-types";\nimport { Link } from "react-router-dom";\nimport { connect } from "react-redux";\n\n//Components\nimport DeleteDialog from "../../../components/dialog/DeleteDialog";\n\n//Material UI\nimport withStyles from "@material-ui/core/styles/withStyles";\nimport Grid from "@material-ui/core/Grid";\nimport Typography from "@material-ui/core/Typography";\nimport Paper from "@material-ui/core/Paper";\nimport Fab from "@material-ui/core/Fab";\n\n//Material Icons\nimport EditIcon from "@material-ui/icons/Edit";\nimport DeleteIcon from "@material-ui/icons/Delete";\n\nconst styles = {\n  paper: {\n    padding: "20px"\n  },\n  fab: {\n    marginTop: "10px"\n  },\n  fabDelete: {\n    float: "right"\n  }\n};\n\nclass ViewTodo extends Component {\n  constructor() {\n    super();\n    this.state = {\n      showDeleteDialog: false\n    };\n  }\n  handleDelete() {\n    this.setState({\n      showDeleteDialog: true\n    });\n  }\n  handleDeleteDialogClose() {\n    this.setState({\n      showDeleteDialog: false\n    });\n  }\n  render() {\n    const classes = this.props.classes;\n    const todo = this.props.todo;\n    return (\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n            <Paper elevation={3} className={classes.paper}>\n              <Fab\n                size="small"\n                color="secondary"\n                className={classes.fabDelete}\n                onClick={this.handleDelete.bind(this)}\n              >\n                <DeleteIcon />\n              </Fab>\n              <DeleteDialog\n                deleteFunction={this.props.deleteTodo}\n                open={this.state.showDeleteDialog}\n                handleClose={this.handleDeleteDialogClose.bind(this)}\n              />\n              <Typography variant="h5">{todo.name}</Typography>\n              <Typography variant="body1">\n                <span\n                  dangerouslySetInnerHTML={{\n                    __html: todo.description\n                  }}\n                />\n              </Typography>\n              <Typography variant="body1">{todo.status}</Typography>\n\n              <Link to={`/todo/edit/${todo.id}`}>\n                <Fab size="small" color="default" className={classes.fab}>\n                  <EditIcon />\n                </Fab>\n              </Link>\n            </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nViewTodo.propTypes = {\n  classes: PropTypes.object.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  todo: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({});\n\nexport default connect(mapStateToProps, null)(withStyles(styles)(ViewTodo));\n',
    folder: 'src/components/app/todo/' },
  { id: 'I16DVLRM4EH90uHBCiVZ',
    objId: '',
    appId: '4jOfLfzb0vUIptM0mBo1',
    type: 'actions',
    createdAtTimestamp: 1580062792865,
    username: 'user5',
    createdAt: 'Sun, 26 Jan 2020 18:19:52 GMT',
    description: 'object actions',
    code:
     'import React, { Component } from "react";\nimport PropTypes from "prop-types";\nimport { Link } from "react-router-dom";\nimport { connect } from "react-redux";\n\n//Components\nimport ErrorMessages from "../../error/ErrorMessages";\n\n//Material UI\nimport withStyles from "@material-ui/core/styles/withStyles";\nimport Grid from "@material-ui/core/Grid";\nimport TextField from "@material-ui/core/TextField";\nimport Button from "@material-ui/core/Button";\nimport CircularProgress from "@material-ui/core/CircularProgress";\n\n//Quill\nimport ReactQuill from "react-quill";\nimport QuillSettings from "../../quill/QuillSettings";\nimport "react-quill/dist/quill.snow.css";\n\nconst styles = {\n  pageHeader: {\n    marginBottom: "20px"\n  },\n  textField: {\n    marginTop: "20px"\n  },\n  progress: {\n    position: "absolute"\n  },\n  saveButton: {\n    marginRight: "20px",\n    width: "100px"\n  },\n  richText: {\n    marginTop: "20px"\n  }\n};\n\nclass EditProjectFull extends Component {\n  render() {\n    const classes = this.props.classes;\n    return (\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <TextField\n            className={classes.textField}\n            name="name"\n            autoComplete="off"\n            label="Name"\n            variant="outlined"\n            onChange={this.props.handleChange}\n            value={this.props.state.name}\n            fullWidth\n          />\n          <ReactQuill\n            className={classes.richText}\n            value={this.props.state.description}\n            modules={QuillSettings.modules}\n            formats={QuillSettings.formats}\n            name="description"\n            onChange={this.props.handleQuillChange}\n          />\n          <TextField\n            className={classes.textField}\n            name="start"\n            autoComplete="off"\n            label="Start"\n            variant="outlined"\n            value={this.props.state.start}\n            onChange={this.props.handleChange}\n            fullWidth\n          />\n\n        </Grid>\n        <Grid item xs={12}>\n          <Button\n            className={classes.saveButton}\n            variant="contained"\n            color="primary"\n            disabled={this.props.loading}\n            onClick={this.props.handleSave}\n          >\n            Save\n            {this.props.loading && (\n              <CircularProgress size={30} className={classes.progress} />\n            )}\n          </Button>\n          <Button\n            component={Link}\n            to={`/project/${this.props.id}`}\n            variant="contained"\n            color="secondary"\n          >\n            Cancel\n          </Button>\n          <ErrorMessages error={this.props.error} />\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nEditProjectFull.propTypes = { classes: PropTypes.object.isRequired, error: PropTypes.object.isRequired };\n\nconst mapStateToProps = state => ({});\n\nexport default connect(mapStateToProps, null)(withStyles(styles)(EditProjectFull));\n',
    folder: 'src/components/app/project/',
    name: 'EditProject.js' },
  { id: 'EZm0OPe7bj3MKZ5NXw2S',
    username: 'user5',
    createdAt: 'Sun, 26 Jan 2020 18:19:52 GMT',
    description: 'object actions',
    code:
     'import React, { Component } from "react";\nimport PropTypes from "prop-types";\nimport { Link } from "react-router-dom";\nimport { connect } from "react-redux";\n\n//Components\nimport ErrorMessages from "../../error/ErrorMessages";\n\n//Material UI\nimport withStyles from "@material-ui/core/styles/withStyles";\nimport Grid from "@material-ui/core/Grid";\nimport TextField from "@material-ui/core/TextField";\nimport Button from "@material-ui/core/Button";\nimport CircularProgress from "@material-ui/core/CircularProgress";\n\n//Quill\nimport ReactQuill from "react-quill";\nimport QuillSettings from "../../quill/QuillSettings";\nimport "react-quill/dist/quill.snow.css";\n\nconst styles = {\n  pageHeader: {\n    marginBottom: "20px"\n  },\n  textField: {\n    marginTop: "20px"\n  },\n  progress: {\n    position: "absolute"\n  },\n  saveButton: {\n    marginRight: "20px",\n    width: "100px"\n  },\n  richText: {\n    marginTop: "20px"\n  }\n};\n\nclass EditTodoFull extends Component {\n  render() {\n    const classes = this.props.classes;\n    return (\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <TextField\n            className={classes.textField}\n            name="name"\n            autoComplete="off"\n            label="Name"\n            variant="outlined"\n            onChange={this.props.handleChange}\n            value={this.props.state.name}\n            fullWidth\n          />\n          <ReactQuill\n            className={classes.richText}\n            value={this.props.state.description}\n            modules={QuillSettings.modules}\n            formats={QuillSettings.formats}\n            name="description"\n            onChange={this.props.handleQuillChange}\n          />\n          <TextField\n            className={classes.textField}\n            name="status"\n            autoComplete="off"\n            label="Status"\n            variant="outlined"\n            value={this.props.state.status}\n            onChange={this.props.handleChange}\n            fullWidth\n          />\n\n        </Grid>\n        <Grid item xs={12}>\n          <Button\n            className={classes.saveButton}\n            variant="contained"\n            color="primary"\n            disabled={this.props.loading}\n            onClick={this.props.handleSave}\n          >\n            Save\n            {this.props.loading && (\n              <CircularProgress size={30} className={classes.progress} />\n            )}\n          </Button>\n          <Button\n            component={Link}\n            to={`/todo/${this.props.id}`}\n            variant="contained"\n            color="secondary"\n          >\n            Cancel\n          </Button>\n          <ErrorMessages error={this.props.error} />\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nEditTodoFull.propTypes = { classes: PropTypes.object.isRequired, error: PropTypes.object.isRequired };\n\nconst mapStateToProps = state => ({});\n\nexport default connect(mapStateToProps, null)(withStyles(styles)(EditTodoFull));\n',
    folder: 'src/components/app/todo/',
    name: 'EditTodo.js',
    objId: '',
    appId: '4jOfLfzb0vUIptM0mBo1',
    type: 'actions',
    createdAtTimestamp: 1580062792865 },
  { id: '6SFTZo8jemgsSVGx7iYp',
    name: 'ViewProject.js',
    objId: '',
    appId: '4jOfLfzb0vUIptM0mBo1',
    type: 'components',
    createdAtTimestamp: 1580062792865,
    username: 'user5',
    createdAt: 'Sun, 26 Jan 2020 18:19:52 GMT',
    description: 'object actions',
    code:
     'import React, { Component } from "react";\nimport PropTypes from "prop-types";\nimport { Link } from "react-router-dom";\nimport { connect } from "react-redux";\n\n//Components\nimport DeleteDialog from "../../../components/dialog/DeleteDialog";\n\n//Material UI\nimport withStyles from "@material-ui/core/styles/withStyles";\nimport Grid from "@material-ui/core/Grid";\nimport Typography from "@material-ui/core/Typography";\nimport Paper from "@material-ui/core/Paper";\nimport Fab from "@material-ui/core/Fab";\n\n//Material Icons\nimport EditIcon from "@material-ui/icons/Edit";\nimport DeleteIcon from "@material-ui/icons/Delete";\n\nconst styles = {\n  paper: {\n    padding: "20px"\n  },\n  fab: {\n    marginTop: "10px"\n  },\n  fabDelete: {\n    float: "right"\n  }\n};\n\nclass ViewProject extends Component {\n  constructor() {\n    super();\n    this.state = {\n      showDeleteDialog: false\n    };\n  }\n  handleDelete() {\n    this.setState({\n      showDeleteDialog: true\n    });\n  }\n  handleDeleteDialogClose() {\n    this.setState({\n      showDeleteDialog: false\n    });\n  }\n  render() {\n    const classes = this.props.classes;\n    const project = this.props.project;\n    return (\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n            <Paper elevation={3} className={classes.paper}>\n              <Fab\n                size="small"\n                color="secondary"\n                className={classes.fabDelete}\n                onClick={this.handleDelete.bind(this)}\n              >\n                <DeleteIcon />\n              </Fab>\n              <DeleteDialog\n                deleteFunction={this.props.deleteProject}\n                open={this.state.showDeleteDialog}\n                handleClose={this.handleDeleteDialogClose.bind(this)}\n              />\n              <Typography variant="h5">{project.name}</Typography>\n              <Typography variant="body1">\n                <span\n                  dangerouslySetInnerHTML={{\n                    __html: project.description\n                  }}\n                />\n              </Typography>\n              <Typography variant="body1">{project.start}</Typography>\n\n              <Link to={`/project/edit/${project.id}`}>\n                <Fab size="small" color="default" className={classes.fab}>\n                  <EditIcon />\n                </Fab>\n              </Link>\n            </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nViewProject.propTypes = {\n  classes: PropTypes.object.isRequired,\n  deleteProject: PropTypes.func.isRequired,\n  project: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({});\n\nexport default connect(mapStateToProps, null)(withStyles(styles)(ViewProject));\n',
    folder: 'src/components/app/project/' },
  { id: '5lJZnFsY27ZIxKMfwvJz',
    description: 'object actions',
    code:
     'import React, { Component } from "react";\nimport PropTypes from "prop-types";\nimport { Link } from "react-router-dom";\nimport { connect } from "react-redux";\n\n//Components\nimport ErrorMessages from "../../error/ErrorMessages";\n\n//Material UI\nimport withStyles from "@material-ui/core/styles/withStyles";\nimport Grid from "@material-ui/core/Grid";\nimport TextField from "@material-ui/core/TextField";\nimport Button from "@material-ui/core/Button";\nimport CircularProgress from "@material-ui/core/CircularProgress";\n\n//Quill\nimport ReactQuill from "react-quill";\nimport QuillSettings from "../../quill/QuillSettings";\nimport "react-quill/dist/quill.snow.css";\n\nconst styles = {\n  textField: {\n    marginTop: "20px"\n  },\n  progress: {\n    position: "absolute"\n  },\n  submitButton: {\n    marginRight: "10px"\n  },\n  richText: {\n    marginTop: "20px"\n  }\n};\n\nclass CreateProject extends Component {\n  constructor() {\n    super();\n    this.state = {\n      name: "",\n      description: "",\n      descriptionDelta: [],\n        start: "",\n\n    };\n  }\n  handleChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n  handleSubmit = async event => {\n    event.preventDefault();\n    const data = {\n      name: this.state.name,\n      description: this.state.description,\n      descriptionDelta: this.state.descriptionDelta,\n      start: this.state.start,\n\n    };\n    await this.props.createProject(data);\n  };\n  handleCancel = async event => {};\n\n  handleQuillChange(value, delta, source, editor) {\n    this.setState({\n      description: editor.getHTML(),\n      descriptionDelta: editor.getContents()\n    });\n  }\n  render() {\n    const classes = this.props.classes;\n    const loading = this.props.loading;\n    const error = this.props.error;\n    return (\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <TextField\n            className={classes.textField}\n            name="name"\n            autoComplete="off"\n            label="Name"\n            variant="outlined"\n            onChange={this.handleChange}\n            fullWidth\n          />\n          <ReactQuill\n            className={classes.richText}\n            value={this.state.description}\n            modules={QuillSettings.modules}\n            formats={QuillSettings.formats}\n            name="description"\n            placeholder="Description"\n            onChange={this.handleQuillChange.bind(this)}\n          />\n          <TextField\n            className={classes.textField}\n            name="start"\n            autoComplete="off"\n            label="Start"\n            variant="outlined"\n            onChange={this.handleChange}\n            fullWidth\n          />\n\n        </Grid>\n        <Grid item xs={12}>\n          <Button\n            className={classes.submitButton}\n            variant="contained"\n            color="primary"\n            disabled={loading}\n            onClick={this.handleSubmit}\n          >\n            Submit\n            {loading && (\n              <CircularProgress size={30} className={classes.progress} />\n            )}\n          </Button>\n          <Button\n            variant="contained"\n            color="secondary"\n            component={Link}\n            to={`/project`}>\n            Cancel\n          </Button>\n        </Grid>\n        <Grid item xs={12}>\n          <ErrorMessages error={error} />\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nCreateProject.propTypes = {\n  classes: PropTypes.object.isRequired,\n  error: PropTypes.object.isRequired,\n  createProject: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({});\n\nexport default connect(mapStateToProps, null)(withStyles(styles)(CreateProject));\n',
    folder: 'src/components/app/project/',
    name: 'CreateProject.js',
    objId: '',
    appId: '4jOfLfzb0vUIptM0mBo1',
    type: 'actions',
    createdAtTimestamp: 1580062792865,
    username: 'user5',
    createdAt: 'Sun, 26 Jan 2020 18:19:52 GMT' },
  { id: '4oMiQicEHW4dIez8we0j',
    name: 'AllTodo.js',
    objId: '',
    appId: '4jOfLfzb0vUIptM0mBo1',
    type: 'components',
    createdAtTimestamp: 1580062792865,
    username: 'user5',
    createdAt: 'Sun, 26 Jan 2020 18:19:52 GMT',
    description: 'object actions',
    code:
     'import React, { Component, Fragment } from "react";\nimport PropTypes from "prop-types";\nimport { connect } from "react-redux";\n\n//Components\nimport SimpleCard from "../../view/SimpleCard";\n\n//Material UI\nimport withStyles from "@material-ui/core/styles/withStyles";\n\nconst styles = {};\n\nclass AllTodo extends Component {\n  render() {\n    const todos = this.props.todos;\n    return (\n      <Fragment>\n        {todos &&\n          todos.length > 0 &&\n          todos.map(todo => {\n            if (todo.status !== "done") {\n              const topHeader = todo.username;\n              const title = todo.name;\n              const subTitle = todo.status;\n              const content = "";\n              const link = {\n                title: "Open Todo",\n                url: `/todo/${todo.id}`\n              };\n              return (\n                <SimpleCard\n                  key={todo.id}\n                  topHeader={topHeader}\n                  title={title}\n                  subTitle={subTitle}\n                  content={content}\n                  link={link}\n                />\n              );\n            }\n            return <Fragment key={todo.id}></Fragment>;\n          })}\n      </Fragment>\n    );\n  }\n}\n\nAllTodo.propTypes = {\n  classes: PropTypes.object.isRequired,\n  todos: PropTypes.array.isRequired\n};\n\nconst mapStateToProps = state => ({});\n\nexport default connect(mapStateToProps, null)(withStyles(styles)(AllTodo));\n',
    folder: 'src/components/app/todo/' },
  { id: 'sM7cBz6h8mu03XZ2MUEX',
    username: 'user5',
    createdAt: 'Sun, 26 Jan 2020 18:19:51 GMT',
    description: 'object actions',
    code:
     'import React, { Component, Fragment } from "react";\nimport PropTypes from "prop-types";\nimport { Link } from "react-router-dom";\n\n//Redux\nimport { connect } from "react-redux";\nimport { getTodos } from "../../redux/actions/todoActions";\nimport { addMessage } from "../../redux/actions/uiActions";\n\n//Components\n//import SimpleTable from "../../components/table/SimpleTable";\nimport AllTodo from "../../components/app/todo/AllTodo";\nimport LoadingBasic from "../../components/loading/LoadingBasic";\nimport PageHeader from "../../components/nav/PageHeader";\nimport ErrorHandler from "../../components/error/ErrorHandler";\n\n//Material UI\nimport withStyles from "@material-ui/core/styles/withStyles";\nimport Grid from "@material-ui/core/Grid";\nimport Fab from "@material-ui/core/Fab";\n\n//Material Icons\nimport AddIcon from "@material-ui/icons/Add";\n\nconst styles = {\n  fab: {\n    marginTop: "20px"\n  }\n};\n\nclass todoAll extends Component {\n  async componentDidMount() {\n    this.props.getTodos();\n  }\n  render() {\n    const classes = this.props.classes;\n    const todos = this.props.todo.todos;\n    const loading = this.props.todo.readLoading;\n    const error = this.props.todo.error;\n    let header = (\n      <PageHeader\n        ancestors={[{ name: "Home", url: "/" }]}\n        currentPage={{ name: "Todos", url: "/todo" }}\n        title={"Todos"}\n      />\n    );\n    let body;\n    let footer;\n    //loading\n    if (loading) {\n      body = (\n        <Grid container item xs={12}>\n          <LoadingBasic />\n        </Grid>\n      );\n    } else {\n      body = (\n        <Fragment>\n          <Grid container item xs={12}>\n            <AllTodo todos={todos} />\n          </Grid>\n          <Grid container item xs={12}>\n            <Link to={`/todo/create`}>\n              <Fab size="small" color="default" className={classes.fab}>\n                <AddIcon />\n              </Fab>\n            </Link>\n          </Grid>\n        </Fragment>\n      );\n    }\n    return (\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          {header}\n          {Object.keys(error).length === 0 && error.constructor === Object ? (\n            <Fragment>{body}</Fragment>\n          ) : (\n            <ErrorHandler error={error} />\n          )}\n          {footer}\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\ntodoAll.propTypes = {\n  classes: PropTypes.object.isRequired,\n  getTodos: PropTypes.func.isRequired,\n  addMessage: PropTypes.func.isRequired,\n  todo: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  todo: state.todo\n});\n\nexport default connect(mapStateToProps, {\n  getTodos,\n  addMessage\n})(withStyles(styles)(todoAll));\n',
    folder: 'src/routes/todo/',
    name: 'todoAll.js',
    objId: '',
    appId: '4jOfLfzb0vUIptM0mBo1',
    type: 'actions',
    createdAtTimestamp: 1580062791695 },
  { id: 'gP9WxlVpf80WP7YV4iOa',
    description: 'object actions',
    code:
     'import React, { Component } from "react";\nimport PropTypes from "prop-types";\n\n//Redux\nimport { connect } from "react-redux";\nimport { createProject } from "../../redux/actions/projectActions";\n\n//Components\nimport CreateProject from "../../components/app/project/CreateProject";\nimport LoadingBasic from "../../components/loading/LoadingBasic";\nimport PageHeader from "../../components/nav/PageHeader";\n\n//Material UI\nimport withStyles from "@material-ui/core/styles/withStyles";\nimport Grid from "@material-ui/core/Grid";\n\nconst styles = {};\n\nclass projectCreate extends Component {\n  async createProject(data) {\n    await this.props.createProject(data, this.props.history);\n  }\n  render() {\n    const loading = this.props.project.loading;\n    const error = this.props.project.error;\n    let header = (\n      <PageHeader\n        ancestors={[\n          { name: "Home", url: "/" },\n          { name: "Projects", url: "/project" }\n        ]}\n        currentPage={{ name: "Create", url: "#" }}\n        title={"Create Project"}\n      />\n    );\n    let footer;\n    let body;\n\n    //loading\n    if (loading) {\n      body = <LoadingBasic />;\n    } else {\n      body = (\n        <CreateProject\n          loading={loading}\n          createProject={this.createProject.bind(this)}\n          error={error}\n        />\n      );\n    }\n\n    return (\n      <Grid container alignItems="center">\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            {header}\n            {body}\n            {footer}\n          </Grid>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nprojectCreate.propTypes = {\n  classes: PropTypes.object.isRequired,\n  createProject: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  project: state.project\n});\n\nexport default connect(mapStateToProps, { createProject })(\n  withStyles(styles)(projectCreate)\n);\n',
    folder: 'src/routes/project/',
    name: 'projectCreate.js',
    objId: '',
    appId: '4jOfLfzb0vUIptM0mBo1',
    type: 'actions',
    createdAtTimestamp: 1580062791695,
    username: 'user5',
    createdAt: 'Sun, 26 Jan 2020 18:19:51 GMT' },
  { id: 'SczuHua3YxkyMHXnxek4',
    name: 'projectView.js',
    objId: '',
    appId: '4jOfLfzb0vUIptM0mBo1',
    type: 'actions',
    createdAtTimestamp: 1580062791695,
    username: 'user5',
    createdAt: 'Sun, 26 Jan 2020 18:19:51 GMT',
    description: 'object actions',
    code:
     'import React, { Component, Fragment } from "react";\nimport PropTypes from "prop-types";\n\n//Redux\nimport { connect } from "react-redux";\nimport { getProject, deleteProject } from "../../redux/actions/projectActions";\n\n//Components\nimport ViewProject from "../../components/app/project/ViewProject";\nimport LoadingBasic from "../../components/loading/LoadingBasic";\nimport PageHeader from "../../components/nav/PageHeader";\nimport ErrorHandler from "../../components/error/ErrorHandler";\n\n//Material UI\nimport withStyles from "@material-ui/core/styles/withStyles";\nimport Grid from "@material-ui/core/Grid";\n\nconst styles = {\n  pageHeader: {\n    marginBottom: "20px"\n  }\n};\n\nclass projectView extends Component {\n  async componentDidMount() {\n    const id = this.props.match.params.id;\n    await this.props.getProject(id);\n  }\n  async deleteProject() {\n    const id = this.props.match.params.id;\n    await this.props.deleteProject(id, this.props.history);\n  }\n  render() {\n    const project = this.props.project.project;\n    const loading = this.props.project.readLoading;\n    const error = this.props.project.error;\n    let header = (\n      <PageHeader\n        ancestors={[\n          { name: "Home", url: "/" },\n          { name: "Projects", url: "/project" }\n        ]}\n        currentPage={{ name: project.name, url: "/project" }}\n        title={"Projects"}\n      />\n    );\n    let body;\n    let footer;\n    if (loading) {\n      body = (\n        <Grid container item xs={12}>\n          <LoadingBasic />\n        </Grid>\n      );\n    } else {\n      body = <ViewProject project={project} deleteProject={this.deleteProject.bind(this)} />;\n    }\n    return (\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          {header}\n          {Object.keys(error).length === 0 && error.constructor === Object ? (\n            <Fragment>{body}</Fragment>\n          ) : (\n            <ErrorHandler error={error} />\n          )}\n          {footer}\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nprojectView.propTypes = {\n  classes: PropTypes.object.isRequired,\n  deleteProject: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({ project: state.project });\n\nexport default connect(mapStateToProps, { getProject, deleteProject })(\n  withStyles(styles)(projectView)\n);\n',
    folder: 'src/routes/project/' },
  { id: 'LvITVhos5PZULgS9qAMN',
    code:
     'import React, { Component } from "react";\nimport PropTypes from "prop-types";\n\n//Redux\nimport { connect } from "react-redux";\nimport { createTodo } from "../../redux/actions/todoActions";\n\n//Components\nimport CreateTodo from "../../components/app/todo/CreateTodo";\nimport LoadingBasic from "../../components/loading/LoadingBasic";\nimport PageHeader from "../../components/nav/PageHeader";\n\n//Material UI\nimport withStyles from "@material-ui/core/styles/withStyles";\nimport Grid from "@material-ui/core/Grid";\n\nconst styles = {};\n\nclass todoCreate extends Component {\n  async createTodo(data) {\n    await this.props.createTodo(data, this.props.history);\n  }\n  render() {\n    const loading = this.props.todo.loading;\n    const error = this.props.todo.error;\n    let header = (\n      <PageHeader\n        ancestors={[\n          { name: "Home", url: "/" },\n          { name: "Todos", url: "/todo" }\n        ]}\n        currentPage={{ name: "Create", url: "#" }}\n        title={"Create Todo"}\n      />\n    );\n    let footer;\n    let body;\n\n    //loading\n    if (loading) {\n      body = <LoadingBasic />;\n    } else {\n      body = (\n        <CreateTodo\n          loading={loading}\n          createTodo={this.createTodo.bind(this)}\n          error={error}\n        />\n      );\n    }\n\n    return (\n      <Grid container alignItems="center">\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            {header}\n            {body}\n            {footer}\n          </Grid>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\ntodoCreate.propTypes = {\n  classes: PropTypes.object.isRequired,\n  createTodo: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  todo: state.todo\n});\n\nexport default connect(mapStateToProps, { createTodo })(\n  withStyles(styles)(todoCreate)\n);\n',
    folder: 'src/routes/todo/',
    name: 'todoCreate.js',
    objId: '',
    appId: '4jOfLfzb0vUIptM0mBo1',
    type: 'actions',
    createdAtTimestamp: 1580062791695,
    username: 'user5',
    createdAt: 'Sun, 26 Jan 2020 18:19:51 GMT',
    description: 'object actions' },
  { id: 'JZByYJe5vALy2xpfv1cB',
    name: 'projectEdit.js',
    objId: '',
    appId: '4jOfLfzb0vUIptM0mBo1',
    type: 'actions',
    createdAtTimestamp: 1580062791695,
    username: 'user5',
    createdAt: 'Sun, 26 Jan 2020 18:19:51 GMT',
    description: 'object actions',
    code:
     'import React, { Component, Fragment } from "react";\nimport PropTypes from "prop-types";\n\n//Redux\nimport { connect } from "react-redux";\nimport { getProject, editProject } from "../../redux/actions/projectActions";\n\n//Components\nimport EditProject from "../../components/app/project/EditProject";\nimport LoadingBasic from "../../components/loading/LoadingBasic";\nimport PageHeader from "../../components/nav/PageHeader";\nimport ErrorHandler from "../../components/error/ErrorHandler";\n\n//Material UI\nimport withStyles from "@material-ui/core/styles/withStyles";\nimport Grid from "@material-ui/core/Grid";\n\nconst styles = {\n  pageHeader: {\n    marginBottom: "20px"\n  },\n  textField: {\n    marginTop: "20px"\n  },\n  progress: {\n    position: "absolute"\n  },\n  saveButton: {\n    marginRight: "20px",\n    width: "100px"\n  }\n};\n\nclass projectEdit extends Component {\n  constructor() {\n    super();\n    this.state = {\n      name: "",\n      description: "",\n      descriptionDelta: [],\n          start: "",\n\n    };\n  }\n  async componentDidMount() {\n    await this.props.getProject(this.props.match.params.id);\n    const project = this.props.project.project;\n    const errors = this.props.project.errors;\n    if (!errors || !(errors.length > 0)) {\n      this.setState({\n        name: project.name,\n        description: project.description,\n        descriptionDelta: project.descriptionDelta,\n      start: project.start,\n\n      });\n    }\n  }\n  async editProject(data) {\n    await this.props.editProject(\n      this.props.match.params.id,\n      data,\n      this.props.history\n    );\n  }\n  handleChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n  handleQuillChange(value, delta, source, editor) {\n    this.setState({\n      description: editor.getHTML(),\n      descriptionDelta: editor.getContents()\n    });\n  }\n  handleSave = async event => {\n    event.preventDefault();\n    const data = {\n      name: this.state.name,\n      description: this.state.description,\n      descriptionDelta: this.state.descriptionDelta,\n      start: this.state.start,\n\n    };\n    await this.props.editProject(\n      this.props.match.params.id,\n      data,\n      this.props.history\n    );\n  };\n  render() {\n    const loading = this.props.project.readLoading;\n    const saveLoading = this.props.project.writeLoading;\n    const error = this.props.project.error;\n    let header = (\n      <PageHeader\n        ancestors={[\n          { name: "Home", url: "/" },\n          { name: "Projects", url: "/project" },\n          { name: this.state.name, url: `/project/${this.props.match.params.id}` }\n        ]}\n        currentPage={{ name: "Edit", url: "#" }}\n        title={"Projects"}\n      />\n    );\n    let body;\n    let footer = <Fragment></Fragment>;\n\n    //loading\n    if (loading) {\n      body = <LoadingBasic />;\n    } else {\n      body = (\n        <EditProject\n          handleSave={this.handleSave.bind(this)}\n          handleChange={this.handleChange.bind(this)}\n          handleQuillChange={this.handleQuillChange.bind(this)}\n          id={this.props.match.params.id}\n          loading={saveLoading}\n          state={this.state}\n          error={error}\n        />\n      );\n    }\n    return (\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          {header}\n          {Object.keys(error).length === 0 && error.constructor === Object ? (\n            <Fragment>{body}</Fragment>\n          ) : (\n            <ErrorHandler error={error} />\n          )}\n          {footer}\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nprojectEdit.propTypes = {\n  classes: PropTypes.object.isRequired,\n  getProject: PropTypes.func.isRequired,\n  editProject: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  project: state.project\n});\n\nexport default connect(mapStateToProps, { getProject, editProject })(\n  withStyles(styles)(projectEdit)\n);\n',
    folder: 'src/routes/project/' },
  { id: 'ED8LAU3de4pfkK5twf7i',
    description: 'object actions',
    code:
     'import React, { Component, Fragment } from "react";\nimport PropTypes from "prop-types";\n\n//Redux\nimport { connect } from "react-redux";\nimport { getTodo, editTodo } from "../../redux/actions/todoActions";\n\n//Components\nimport EditTodo from "../../components/app/todo/EditTodo";\nimport LoadingBasic from "../../components/loading/LoadingBasic";\nimport PageHeader from "../../components/nav/PageHeader";\nimport ErrorHandler from "../../components/error/ErrorHandler";\n\n//Material UI\nimport withStyles from "@material-ui/core/styles/withStyles";\nimport Grid from "@material-ui/core/Grid";\n\nconst styles = {\n  pageHeader: {\n    marginBottom: "20px"\n  },\n  textField: {\n    marginTop: "20px"\n  },\n  progress: {\n    position: "absolute"\n  },\n  saveButton: {\n    marginRight: "20px",\n    width: "100px"\n  }\n};\n\nclass todoEdit extends Component {\n  constructor() {\n    super();\n    this.state = {\n      name: "",\n      description: "",\n      descriptionDelta: [],\n          status: "",\n\n    };\n  }\n  async componentDidMount() {\n    await this.props.getTodo(this.props.match.params.id);\n    const todo = this.props.todo.todo;\n    const errors = this.props.todo.errors;\n    if (!errors || !(errors.length > 0)) {\n      this.setState({\n        name: todo.name,\n        description: todo.description,\n        descriptionDelta: todo.descriptionDelta,\n      status: todo.status,\n\n      });\n    }\n  }\n  async editTodo(data) {\n    await this.props.editTodo(\n      this.props.match.params.id,\n      data,\n      this.props.history\n    );\n  }\n  handleChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n  handleQuillChange(value, delta, source, editor) {\n    this.setState({\n      description: editor.getHTML(),\n      descriptionDelta: editor.getContents()\n    });\n  }\n  handleSave = async event => {\n    event.preventDefault();\n    const data = {\n      name: this.state.name,\n      description: this.state.description,\n      descriptionDelta: this.state.descriptionDelta,\n      status: this.state.status,\n\n    };\n    await this.props.editTodo(\n      this.props.match.params.id,\n      data,\n      this.props.history\n    );\n  };\n  render() {\n    const loading = this.props.todo.readLoading;\n    const saveLoading = this.props.todo.writeLoading;\n    const error = this.props.todo.error;\n    let header = (\n      <PageHeader\n        ancestors={[\n          { name: "Home", url: "/" },\n          { name: "Todos", url: "/todo" },\n          { name: this.state.name, url: `/todo/${this.props.match.params.id}` }\n        ]}\n        currentPage={{ name: "Edit", url: "#" }}\n        title={"Todos"}\n      />\n    );\n    let body;\n    let footer = <Fragment></Fragment>;\n\n    //loading\n    if (loading) {\n      body = <LoadingBasic />;\n    } else {\n      body = (\n        <EditTodo\n          handleSave={this.handleSave.bind(this)}\n          handleChange={this.handleChange.bind(this)}\n          handleQuillChange={this.handleQuillChange.bind(this)}\n          id={this.props.match.params.id}\n          loading={saveLoading}\n          state={this.state}\n          error={error}\n        />\n      );\n    }\n    return (\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          {header}\n          {Object.keys(error).length === 0 && error.constructor === Object ? (\n            <Fragment>{body}</Fragment>\n          ) : (\n            <ErrorHandler error={error} />\n          )}\n          {footer}\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\ntodoEdit.propTypes = {\n  classes: PropTypes.object.isRequired,\n  getTodo: PropTypes.func.isRequired,\n  editTodo: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  todo: state.todo\n});\n\nexport default connect(mapStateToProps, { getTodo, editTodo })(\n  withStyles(styles)(todoEdit)\n);\n',
    folder: 'src/routes/todo/',
    name: 'todoEdit.js',
    objId: '',
    appId: '4jOfLfzb0vUIptM0mBo1',
    type: 'actions',
    createdAtTimestamp: 1580062791695,
    username: 'user5',
    createdAt: 'Sun, 26 Jan 2020 18:19:51 GMT' },
  { id: '8qbwPshJOKAV76lUJVps',
    description: 'object actions',
    code:
     'import React, { Component, Fragment } from "react";\nimport PropTypes from "prop-types";\nimport { Link } from "react-router-dom";\n\n//Redux\nimport { connect } from "react-redux";\nimport { getProjects } from "../../redux/actions/projectActions";\nimport { addMessage } from "../../redux/actions/uiActions";\n\n//Components\n//import SimpleTable from "../../components/table/SimpleTable";\nimport AllProject from "../../components/app/project/AllProject";\nimport LoadingBasic from "../../components/loading/LoadingBasic";\nimport PageHeader from "../../components/nav/PageHeader";\nimport ErrorHandler from "../../components/error/ErrorHandler";\n\n//Material UI\nimport withStyles from "@material-ui/core/styles/withStyles";\nimport Grid from "@material-ui/core/Grid";\nimport Fab from "@material-ui/core/Fab";\n\n//Material Icons\nimport AddIcon from "@material-ui/icons/Add";\n\nconst styles = {\n  fab: {\n    marginTop: "20px"\n  }\n};\n\nclass projectAll extends Component {\n  async componentDidMount() {\n    this.props.getProjects();\n  }\n  render() {\n    const classes = this.props.classes;\n    const projects = this.props.project.projects;\n    const loading = this.props.project.readLoading;\n    const error = this.props.project.error;\n    let header = (\n      <PageHeader\n        ancestors={[{ name: "Home", url: "/" }]}\n        currentPage={{ name: "Projects", url: "/project" }}\n        title={"Projects"}\n      />\n    );\n    let body;\n    let footer;\n    //loading\n    if (loading) {\n      body = (\n        <Grid container item xs={12}>\n          <LoadingBasic />\n        </Grid>\n      );\n    } else {\n      body = (\n        <Fragment>\n          <Grid container item xs={12}>\n            <AllProject projects={projects} />\n          </Grid>\n          <Grid container item xs={12}>\n            <Link to={`/project/create`}>\n              <Fab size="small" color="default" className={classes.fab}>\n                <AddIcon />\n              </Fab>\n            </Link>\n          </Grid>\n        </Fragment>\n      );\n    }\n    return (\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          {header}\n          {Object.keys(error).length === 0 && error.constructor === Object ? (\n            <Fragment>{body}</Fragment>\n          ) : (\n            <ErrorHandler error={error} />\n          )}\n          {footer}\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nprojectAll.propTypes = {\n  classes: PropTypes.object.isRequired,\n  getProjects: PropTypes.func.isRequired,\n  addMessage: PropTypes.func.isRequired,\n  project: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  project: state.project\n});\n\nexport default connect(mapStateToProps, {\n  getProjects,\n  addMessage\n})(withStyles(styles)(projectAll));\n',
    folder: 'src/routes/project/',
    name: 'projectAll.js',
    objId: '',
    appId: '4jOfLfzb0vUIptM0mBo1',
    type: 'actions',
    createdAtTimestamp: 1580062791695,
    username: 'user5',
    createdAt: 'Sun, 26 Jan 2020 18:19:51 GMT' },
  { id: '44iRq1FnFM9RiTPg1EfI',
    description: 'object actions',
    code:
     'import React, { Component, Fragment } from "react";\nimport PropTypes from "prop-types";\n\n//Redux\nimport { connect } from "react-redux";\nimport { getTodo, deleteTodo } from "../../redux/actions/todoActions";\n\n//Components\nimport ViewTodo from "../../components/app/todo/ViewTodo";\nimport LoadingBasic from "../../components/loading/LoadingBasic";\nimport PageHeader from "../../components/nav/PageHeader";\nimport ErrorHandler from "../../components/error/ErrorHandler";\n\n//Material UI\nimport withStyles from "@material-ui/core/styles/withStyles";\nimport Grid from "@material-ui/core/Grid";\n\nconst styles = {\n  pageHeader: {\n    marginBottom: "20px"\n  }\n};\n\nclass todoView extends Component {\n  async componentDidMount() {\n    const id = this.props.match.params.id;\n    await this.props.getTodo(id);\n  }\n  async deleteTodo() {\n    const id = this.props.match.params.id;\n    await this.props.deleteTodo(id, this.props.history);\n  }\n  render() {\n    const todo = this.props.todo.todo;\n    const loading = this.props.todo.readLoading;\n    const error = this.props.todo.error;\n    let header = (\n      <PageHeader\n        ancestors={[\n          { name: "Home", url: "/" },\n          { name: "Todos", url: "/todo" }\n        ]}\n        currentPage={{ name: todo.name, url: "/todo" }}\n        title={"Todos"}\n      />\n    );\n    let body;\n    let footer;\n    if (loading) {\n      body = (\n        <Grid container item xs={12}>\n          <LoadingBasic />\n        </Grid>\n      );\n    } else {\n      body = <ViewTodo todo={todo} deleteTodo={this.deleteTodo.bind(this)} />;\n    }\n    return (\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          {header}\n          {Object.keys(error).length === 0 && error.constructor === Object ? (\n            <Fragment>{body}</Fragment>\n          ) : (\n            <ErrorHandler error={error} />\n          )}\n          {footer}\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\ntodoView.propTypes = {\n  classes: PropTypes.object.isRequired,\n  deleteTodo: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({ todo: state.todo });\n\nexport default connect(mapStateToProps, { getTodo, deleteTodo })(\n  withStyles(styles)(todoView)\n);\n',
    folder: 'src/routes/todo/',
    name: 'todoView.js',
    objId: '',
    appId: '4jOfLfzb0vUIptM0mBo1',
    type: 'actions',
    createdAtTimestamp: 1580062791695,
    username: 'user5',
    createdAt: 'Sun, 26 Jan 2020 18:19:51 GMT' },
  { id: 'MD7N5PGlBGpkMGqaZdP8',
    username: 'user5',
    createdAt: 'Sun, 26 Jan 2020 18:19:51 GMT',
    description: 'object actions',
    code:
     'import {\n  CREATE_PROJECT,\n  READ_PROJECT_ALL,\n  READ_PROJECT,\n  UPDATE_PROJECT,\n  DELETE_PROJECT,\n  READ_LOADING_PROJECT,\n  WRITE_LOADING_PROJECT,\n  SET_PROJECT_ERROR\n} from "../types";\nimport axios from "axios";\n\nimport { addMessageUtil } from "./actionsUtil.js";\n\nexport const getProjects = () => async dispatch => {\n  dispatch({ type: READ_LOADING_PROJECT });\n  try {\n    const projects = await axios.get("/project");\n    dispatch({ type: READ_PROJECT_ALL, payload: projects.data });\n    return projects;\n  } catch (err) {\n    const errors = getErrors(err);\n    console.log(err);\n    console.log(errors);\n    dispatch({\n      type: SET_PROJECT_ERROR,\n      payload: errors\n    });\n  }\n};\n\nexport const getProject = id => async dispatch => {\n  dispatch({ type: READ_LOADING_PROJECT });\n  try {\n    const project = await axios.get("/project/" + id);\n    dispatch({ type: READ_PROJECT, payload: project.data });\n    return project;\n  } catch (err) {\n    const errors = getErrors(err);\n    console.log(err);\n    console.log(errors);\n    dispatch({\n      type: SET_PROJECT_ERROR,\n      payload: errors\n    });\n  }\n};\n\nexport const createProject = (data, history) => async dispatch => {\n  dispatch({ type: WRITE_LOADING_PROJECT });\n  try {\n    const project = await axios.post("/project", data);\n    dispatch({ type: CREATE_PROJECT, payload: project.data });\n    addMessageUtil({ message: "Project created successfully", timeout: 4000 }, dispatch);\n    history.push(`/project`);\n  } catch (err) {\n    const errors = getErrors(err);\n    console.log(err);\n    console.log(errors);\n    dispatch({\n      type: SET_PROJECT_ERROR,\n      payload: errors\n    });\n  }\n};\n\nexport const editProject = (id, project, history) => async dispatch => {\n  dispatch({ type: WRITE_LOADING_PROJECT });\n  try {\n    const projectData = await axios.put(`/project/${id}`, project);\n    dispatch({\n      type: UPDATE_PROJECT,\n      payload: projectData.data\n    });\n    addMessageUtil(\n      { message: "Project updated successfully", timeout: 4000 },\n      dispatch\n    );\n    history.push(`/project/${id}`);\n  } catch (err) {\n    const errors = getErrors(err);\n    console.log(err);\n    console.log(errors);\n    dispatch({\n      type: SET_PROJECT_ERROR,\n      payload: errors\n    });\n  }\n};\n\nexport const deleteProject = (id, history) => async dispatch => {\n  dispatch({ type: WRITE_LOADING_PROJECT });\n  try {\n    const project = await axios.delete("/project/" + id);\n    dispatch({ type: DELETE_PROJECT, payload: project.data });\n    addMessageUtil(\n      { message: "Project deleted successfully", timeout: 4000 },\n      dispatch\n    );\n    history.push("/project");\n  } catch (err) {\n    const errors = getErrors(err);\n    console.log(err);\n    console.log(errors);\n    dispatch({\n      type: SET_PROJECT_ERROR,\n      payload: errors\n    });\n  }\n};\n',
    folder: 'src/redux/actions/',
    name: 'projectActions.js',
    objId: '',
    appId: '4jOfLfzb0vUIptM0mBo1',
    type: 'actions',
    createdAtTimestamp: 1580062791103 },
  { id: 'FTsgUqSqcylaIdb9jQWA',
    code:
     'import {\n  CREATE_TODO,\n  READ_TODO_ALL,\n  READ_TODO,\n  UPDATE_TODO,\n  DELETE_TODO,\n  READ_LOADING_TODO,\n  WRITE_LOADING_TODO,\n  SET_TODO_ERROR\n} from "../types";\nimport axios from "axios";\n\nimport { addMessageUtil } from "./actionsUtil.js";\n\nexport const getTodos = () => async dispatch => {\n  dispatch({ type: READ_LOADING_TODO });\n  try {\n    const todos = await axios.get("/todo");\n    dispatch({ type: READ_TODO_ALL, payload: todos.data });\n    return todos;\n  } catch (err) {\n    const errors = getErrors(err);\n    console.log(err);\n    console.log(errors);\n    dispatch({\n      type: SET_TODO_ERROR,\n      payload: errors\n    });\n  }\n};\n\nexport const getTodo = id => async dispatch => {\n  dispatch({ type: READ_LOADING_TODO });\n  try {\n    const todo = await axios.get("/todo/" + id);\n    dispatch({ type: READ_TODO, payload: todo.data });\n    return todo;\n  } catch (err) {\n    const errors = getErrors(err);\n    console.log(err);\n    console.log(errors);\n    dispatch({\n      type: SET_TODO_ERROR,\n      payload: errors\n    });\n  }\n};\n\nexport const createTodo = (data, history) => async dispatch => {\n  dispatch({ type: WRITE_LOADING_TODO });\n  try {\n    const todo = await axios.post("/todo", data);\n    dispatch({ type: CREATE_TODO, payload: todo.data });\n    addMessageUtil({ message: "Todo created successfully", timeout: 4000 }, dispatch);\n    history.push(`/todo`);\n  } catch (err) {\n    const errors = getErrors(err);\n    console.log(err);\n    console.log(errors);\n    dispatch({\n      type: SET_TODO_ERROR,\n      payload: errors\n    });\n  }\n};\n\nexport const editTodo = (id, todo, history) => async dispatch => {\n  dispatch({ type: WRITE_LOADING_TODO });\n  try {\n    const todoData = await axios.put(`/todo/${id}`, todo);\n    dispatch({\n      type: UPDATE_TODO,\n      payload: todoData.data\n    });\n    addMessageUtil(\n      { message: "Todo updated successfully", timeout: 4000 },\n      dispatch\n    );\n    history.push(`/todo/${id}`);\n  } catch (err) {\n    const errors = getErrors(err);\n    console.log(err);\n    console.log(errors);\n    dispatch({\n      type: SET_TODO_ERROR,\n      payload: errors\n    });\n  }\n};\n\nexport const deleteTodo = (id, history) => async dispatch => {\n  dispatch({ type: WRITE_LOADING_TODO });\n  try {\n    const todo = await axios.delete("/todo/" + id);\n    dispatch({ type: DELETE_TODO, payload: todo.data });\n    addMessageUtil(\n      { message: "Todo deleted successfully", timeout: 4000 },\n      dispatch\n    );\n    history.push("/todo");\n  } catch (err) {\n    const errors = getErrors(err);\n    console.log(err);\n    console.log(errors);\n    dispatch({\n      type: SET_TODO_ERROR,\n      payload: errors\n    });\n  }\n};\n',
    folder: 'src/redux/actions/',
    name: 'todoActions.js',
    objId: '',
    appId: '4jOfLfzb0vUIptM0mBo1',
    type: 'actions',
    createdAtTimestamp: 1580062791103,
    username: 'user5',
    createdAt: 'Sun, 26 Jan 2020 18:19:51 GMT',
    description: 'object actions' },
  { id: 'rMzyQtuDrPwLhqSOWhlG',
    folder: 'src/redux/',
    name: 'store.js',
    objId: '',
    appId: '4jOfLfzb0vUIptM0mBo1',
    type: 'store',
    createdAtTimestamp: 1580062790453,
    username: 'user5',
    createdAt: 'Sun, 26 Jan 2020 18:19:50 GMT',
    description: 'redux store',
    code:
     'import { createStore, combineReducers, applyMiddleware, compose } from "redux";\nimport thunk from "redux-thunk";\nimport userReducer from "./reducers/userReducer";\nimport uiReducer from "./reducers/uiReducer";\nimport projectReducer from "./reducers/projectReducer";\nimport todoReducer from "./reducers/todoReducer";\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst reducers = combineReducers({\n  user: userReducer,\n  UI: uiReducer,\n  project: projectReducer,\n  todo: todoReducer,\n});\n\nconst store = createStore(\n  reducers,\n  initialState,\n  compose(\n    applyMiddleware(...middleware),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\n\nexport default store;\n' },
  { id: 'MK51SG5K3UXZGZdZwhyM',
    name: 'type.js',
    objId: '',
    appId: '4jOfLfzb0vUIptM0mBo1',
    type: 'type',
    createdAtTimestamp: 1580062790453,
    username: 'user5',
    createdAt: 'Sun, 26 Jan 2020 18:19:50 GMT',
    description: 'redux types',
    code:
     '//user reducers types\nexport const SET_AUTH = "SET_AUTH";\nexport const SET_UNAUTH = "SET_UNAUTH";\nexport const SET_USER = "SET_USER";\nexport const LOADING_USER = "LOADING_USER";\nexport const SIGNUP_USER = "SIGNUP_USER";\n\n// UI reducer types\nexport const LOADING_UI = "LOADING_UI";\nexport const STOP_LOADING_UI = "STOP_LOADING_UI";\nexport const CLEAR_ERRORS = "CLEAR_ERRORS";\nexport const SET_ERRORS = "SET_ERRORS";\nexport const SET_MESSAGES = "SET_MESSAGES";\nexport const ADD_MESSAGE = "ADD_MESSAGE";\nexport const DELETE_MESSAGE = "DELETE_MESSAGE";\nexport const CLEAR_MESSAGES = "CLEAR_MESSAGES";\n\n// Project reducers\nexport const CREATE_PROJECT = "CREATE_PROJECT";\nexport const READ_PROJECT_ALL = "READ_PROJECT_ALL";\nexport const READ_PROJECT = "READ_PROJECT";\nexport const UPDATE_PROJECT = "UPDATE_PROJECT";\nexport const DELETE_PROJECT = "DELETE_PROJECT";\nexport const WRITE_LOADING_PROJECT = "WRITE_LOADING_PROJECT";\nexport const READ_LOADING_PROJECT = "READ_LOADING_PROJECT";\nexport const SET_PROJECT_ERROR = "SET_PROJECT_ERROR";\n\n// Todo reducers\nexport const CREATE_TODO = "CREATE_TODO";\nexport const READ_TODO_ALL = "READ_TODO_ALL";\nexport const READ_TODO = "READ_TODO";\nexport const UPDATE_TODO = "UPDATE_TODO";\nexport const DELETE_TODO = "DELETE_TODO";\nexport const WRITE_LOADING_TODO = "WRITE_LOADING_TODO";\nexport const READ_LOADING_TODO = "READ_LOADING_TODO";\nexport const SET_TODO_ERROR = "SET_TODO_ERROR";\n\n',
    folder: 'src/redux/' },
  { id: 'LnziSGPQI7IjSMvxt7M6',
    name: 'todoReducer.js',
    objId: '',
    appId: '4jOfLfzb0vUIptM0mBo1',
    type: 'reducer',
    createdAtTimestamp: 1580062790453,
    username: 'user5',
    createdAt: 'Sun, 26 Jan 2020 18:19:50 GMT',
    description: 'object reducer',
    code:
     '//todo reducers\nimport {\n  CREATE_TODO,\n  READ_TODO_ALL,\n  READ_TODO,\n  UPDATE_TODO,\n  DELETE_TODO,\n  READ_LOADING_TODO,\n  WRITE_LOADING_TODO,\n  SET_TODO_ERROR\n} from "../types";\n\nconst initialState = {\n  readLoading: false,\n  writeLoading: false,\n  error: {},\n  todos: [],\n  todo: {}\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case READ_TODO_ALL:\n      return {\n        ...state,\n        readLoading: false,\n        todos: action.payload,\n        error: {}\n      };\n    case READ_TODO:\n      return {\n        ...state,\n        readLoading: false,\n        todo: action.payload,\n        error: {}\n      };\n    case CREATE_TODO:\n      return {\n        ...state,\n        writeLoading: false,\n        todos: [...state.todos, action.payload],\n        error: {}\n      };\n    case DELETE_TODO:\n      return {\n        ...state,\n        writeLoading: false,\n        error: {}\n      };\n    case UPDATE_TODO:\n      return {\n        ...state,\n        writeLoading: false,\n        error: {}\n      };\n    case READ_LOADING_TODO:\n      return {\n        ...state,\n        readLoading: true,\n        error: {}\n      };\n    case WRITE_LOADING_TODO:\n      return {\n        ...state,\n        writeLoading: true,\n        error: {}\n      };\n    case SET_TODO_ERROR:\n      return {\n        ...state,\n        readLoading: false,\n        writeLoading: false,\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n}\n',
    folder: 'src/redux/reducers/' },
  { id: '4oX2tq1fPv9WYbwPxhBQ',
    name: 'projectReducer.js',
    objId: '',
    appId: '4jOfLfzb0vUIptM0mBo1',
    type: 'reducer',
    createdAtTimestamp: 1580062790453,
    username: 'user5',
    createdAt: 'Sun, 26 Jan 2020 18:19:50 GMT',
    description: 'object reducer',
    code:
     '//project reducers\nimport {\n  CREATE_PROJECT,\n  READ_PROJECT_ALL,\n  READ_PROJECT,\n  UPDATE_PROJECT,\n  DELETE_PROJECT,\n  READ_LOADING_PROJECT,\n  WRITE_LOADING_PROJECT,\n  SET_PROJECT_ERROR\n} from "../types";\n\nconst initialState = {\n  readLoading: false,\n  writeLoading: false,\n  error: {},\n  projects: [],\n  project: {}\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case READ_PROJECT_ALL:\n      return {\n        ...state,\n        readLoading: false,\n        projects: action.payload,\n        error: {}\n      };\n    case READ_PROJECT:\n      return {\n        ...state,\n        readLoading: false,\n        project: action.payload,\n        error: {}\n      };\n    case CREATE_PROJECT:\n      return {\n        ...state,\n        writeLoading: false,\n        projects: [...state.projects, action.payload],\n        error: {}\n      };\n    case DELETE_PROJECT:\n      return {\n        ...state,\n        writeLoading: false,\n        error: {}\n      };\n    case UPDATE_PROJECT:\n      return {\n        ...state,\n        writeLoading: false,\n        error: {}\n      };\n    case READ_LOADING_PROJECT:\n      return {\n        ...state,\n        readLoading: true,\n        error: {}\n      };\n    case WRITE_LOADING_PROJECT:\n      return {\n        ...state,\n        writeLoading: true,\n        error: {}\n      };\n    case SET_PROJECT_ERROR:\n      return {\n        ...state,\n        readLoading: false,\n        writeLoading: false,\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n}\n',
    folder: 'src/redux/reducers/' },
  { id: 'AaoRRA6SQXdiOxyce0ET',
    description: 'Route Code',
    code:
     'const functions = require("firebase-functions");\nconst cors = require("cors");\nconst app = require("express")();\nconst FBAuth = require("./util/fbAuth");\napp.use(cors());\n\nconst {\n  signUp,\n  login,\n  getAuthenticatedUser,\n  getUserDetails\n} = require("./handlers/users");\n\nconst {\n  createProject,\n  getProjects,\n  getProjectById,\n  editProject,\n  deleteProject\n} = require("./handlers/project/project_controller");\n\nconst {\n  createTodo,\n  getTodos,\n  getTodoById,\n  editTodo,\n  deleteTodo\n} = require("./handlers/todo/todo_controller");\n\n\n//User routes\napp.post("/signup", signUp);\napp.post("/login", login);\napp.get("/user", FBAuth, getAuthenticatedUser);\napp.get("/user/:username", getUserDetails);\n\n//Project routes\napp.post("/project", FBAuth, createProject);\napp.get("/project", FBAuth, getProjects);\napp.get("/project/:projectId", FBAuth, getProjectById);\napp.put("/project/:projectId", FBAuth, editProject);\napp.delete("/project/:projectId", FBAuth, deleteProject);\n  \n//Todo routes\napp.post("/todo", FBAuth, createTodo);\napp.get("/todo", FBAuth, getTodos);\napp.get("/todo/:todoId", FBAuth, getTodoById);\napp.put("/todo/:todoId", FBAuth, editTodo);\napp.delete("/todo/:todoId", FBAuth, deleteTodo);\n  \n\nexports.api = functions.https.onRequest(app);',
    folder: 'functions/',
    name: 'index.js',
    objId: '',
    appId: '4jOfLfzb0vUIptM0mBo1',
    type: 'route',
    createdAtTimestamp: 1580062790077,
    username: 'user5',
    createdAt: 'Sun, 26 Jan 2020 18:19:50 GMT' },
  { id: 'jAmBBvQu19i9ls5tkImw',
    description: 'Todo Controller Code',
    code:
     'const { db } = require("../../util/admin");\nconst {\n  createtodoService,\n  gettodosService,\n  gettodoByIdService,\n  edittodoService,\n  deletetodoService\n} = require("./Todo_service");\n\nexports.createtodo = async (req, res) => {\n  try {\n    let resp = await createtodoService(db, req.body, req.user);\n    return res.status(resp.status).json(resp.response);\n  } catch (err) {\n    console.error(err);\n    return res.status(500).json(err);\n  }\n};\n\nexports.gettodos = async (req, res) => {\n  try {\n    let resp = await gettodosService(db, req.body, req.user);\n    return res.status(resp.status).json(resp.response);\n  } catch (err) {\n    console.error(err);\n    return res.status(500).json(err);\n  }\n};\n\nexports.gettodoById = async (req, res) => {\n  try {\n    const params = {\n      ...req.body,\n      TodoId: req.params.TodoId\n    };\n    let resp = await gettodoByIdService(db, params, req.user);\n    return res.status(resp.status).json(resp.response);\n  } catch (err) {\n    console.error(err);\n    return res.status(500).json(err);\n  }\n};\n\nexports.edittodo = async (req, res) => {\n  try {\n    const params = {\n      ...req.body,\n      TodoId: req.params.TodoId\n    };\n    let resp = await edittodoService(db, params, req.user);\n    return res.status(resp.status).json(resp.response);\n  } catch (err) {\n    console.error(err);\n    return res.status(500).json(err);\n  }\n};\n\nexports.deletetodo = async (req, res) => {\n  const params = {\n    TodoId: req.params.TodoId\n  };\n  try {\n    let resp = await deletetodoService(db, params, req.user);\n    return res.status(resp.status).json(resp.response);\n  } catch (err) {\n    console.error(err);\n    return res.status(500).json(err);\n  }\n};',
    folder: 'functions/handlers/todo/',
    name: 'todo_controller.js',
    objId: 'JIhznYzLPseaFV7FmxVC',
    appId: '4jOfLfzb0vUIptM0mBo1',
    type: 'controller',
    createdAtTimestamp: 1580062788262,
    username: 'user5',
    createdAt: 'Sun, 26 Jan 2020 18:19:48 GMT' },
  { id: 'QP0JI7ZVwA2YEmeOHbxR',
    description: 'Todo Controller Code Tests',
    code:
     'const axios = require("axios");\n\nlet apiUrl =\n  "http://apiurl";\n\nlet login = async function() {\n  try {\n    let res = await axios.post(apiUrl + "/login", {\n      email: "user5@email.com",\n      password: "123456"\n    });\n    const token = res.data.token;\n    const headers = {\n      "Content-Type": "application/json",\n      Authorization: `Bearer ${token}`\n    };\n    return headers;\n  } catch (err) {\n    console.error(err);\n  }\n  return "";\n};\n\nlet createtodo = async function() {\n  try {\n    let res = await axios.post(apiUrl + "/login", {\n      email: "user5@email.com",\n      password: "123456"\n    });\n    const token = res.data.token;\n    const headers = {\n      "Content-Type": "application/json",\n      Authorization: `Bearer ${token}`\n    };\n    let TodoRes = await axios.post(\n      apiUrl + "/Todo",\n      {\n        name: "new todo 1",\n        description: "just a new Todo",\n        status: "status value",\n        username: "user5"\n      },\n      { headers: headers }\n    );\n    console.log(TodoRes.status);\n    console.log(TodoRes.statusText);\n    console.log(TodoRes.data);\n    return TodoRes.data.id;\n  } catch (err) {\n    console.error(err.response.status);\n    console.error(err.response.statusText);\n    console.error(err.response.data);\n  }\n};\n\nlet gettodos = async function(headers) {\n  try {\n    let TodoRes = await axios.get(apiUrl + "/Todo", { headers: headers });\n    console.log(TodoRes.status);\n    console.log(TodoRes.statusText);\n    console.log(TodoRes.data);\n  } catch (err) {\n    console.error(err.response.status);\n    console.error(err.response.statusText);\n    console.error(err.response.data);\n  }\n};\n\nlet gettodoById = async function(headers, id) {\n  try {\n    let TodoRes = await axios.get(apiUrl + "/Todo/" + id, {\n      headers: headers\n    });\n    console.log(TodoRes.status);\n    console.log(TodoRes.statusText);\n    console.log(TodoRes.data);\n  } catch (err) {\n    console.error(err.response.status);\n    console.error(err.response.statusText);\n    console.error(err.response.data);\n  }\n};\n\nlet edittodo = async function(headers, id) {\n  try {\n    let TodoRes = await axios.put(\n      apiUrl + "/Todo/" + id,\n      {\n        name: "new todo 2",\n        description: "just a new Todo edited",\n        status: "status value",\n        username: "user5"\n      },\n      {\n        headers: headers\n      }\n    );\n    console.log(TodoRes.status);\n    console.log(TodoRes.statusText);\n    console.log(TodoRes.data);\n  } catch (err) {\n    console.error(err.response.status);\n    console.error(err.response.statusText);\n    console.error(err.response.data);\n  }\n};\n\nlet deletetodo = async function(headers, id) {\n  try {\n    let TodoRes = await axios.delete(apiUrl + "/Todo/" + id, {\n      headers: headers\n    });\n    console.log(TodoRes.status);\n    console.log(TodoRes.statusText);\n    console.log(TodoRes.data);\n  } catch (err) {\n    console.error(err.response.status);\n    console.error(err.response.statusText);\n    console.error(err.response.data);\n  }\n};\n\nlet run = async function() {\n  console.log("Login");\n  let headers = await login();\n  console.log("Create todo Run");\n  let id = await createtodo(headers);\n  console.log("Get todos Run");\n  await gettodos(headers);\n  console.log("Get todo by Id Run");\n  await gettodoById(headers, id);\n  console.log("Edit todo Run");\n  await edittodo(headers, id);\n  console.log("Delete todo Run");\n  await deletetodo(headers, id);\n};\n\nrun();',
    folder: 'functions/handlers/todo/tests/',
    name: 'todo_controller_tests.js',
    objId: 'JIhznYzLPseaFV7FmxVC',
    appId: '4jOfLfzb0vUIptM0mBo1',
    type: 'test',
    createdAtTimestamp: 1580062788262,
    username: 'user5',
    createdAt: 'Sun, 26 Jan 2020 18:19:48 GMT' },
  { id: 'VnXX1sMpJ5JRBzhcKpsX',
    objId: 'JIhznYzLPseaFV7FmxVC',
    appId: '4jOfLfzb0vUIptM0mBo1',
    type: 'validator',
    createdAtTimestamp: 1580062787038,
    username: 'user5',
    createdAt: 'Sun, 26 Jan 2020 18:19:47 GMT',
    description: 'Todo Service Validators',
    code:
     'const validateNameValue = name => {\n  if (name && name !== "") {\n    return true;\n  }\n  return false;\n};\n\nexports.validateName = name => {\n  let messages = [];\n  if (!validateNameValue(name)) {\n    messages.push("Name is required")\n  }\n  return {\n    field: "name",\n    messages: messages,\n    valid: Object.keys(messages).length === 0 ? true : false\n  };\n};\n\n// const validatePriorityValue = priority => {\n//   if (priority && priority > 0 && priority < 11) {\n//     return true;\n//   }\n//   return false;\n// };\n\n// exports.validatePriority = priority => {\n//   let messages = [];\n//   if (!validatePriorityValue(priority)) {\n//     messages.push("Priority must be between 1-10");\n//   }\n//   return {\n//     field: "priority",\n//     messages: messages,\n//     valid: Object.keys(messages).length === 0 ? true : false\n//   };\n// };\n',
    folder: 'functions/handlers/todo/',
    name: 'todo_validators.js' },
  { id: 'FfNoP3htLmdscQ6atmyA',
    code:
     'const { validateName } = require("./Todo_validators");\n\nexports.createtodoService = async (db, params, user) => {\n  try {\n    let date = new Date();\n    const newtodo = {\n      name: params.name,\n      description: params.description,\n      username: user.username,\n      status: params.status,\n      createdAt: date.toUTCString(),\n      createdAtTimestamp: date.getTime()\n    };\n    //validation\n    let validationErrors = [];\n    //Name\n    const nameValidation = validateName(params.name);\n    if (!nameValidation.valid) {\n      validationErrors.push(nameValidation);\n    }\n    //Throw Error\n    if (validationErrors.length > 0) {\n      throw { error: validationErrors, function: "createTodoService" };\n    }\n    let Todo = await db.collection("Todo").add(newtodo);\n    let resp = newtodo;\n    resp.id = Todo.id;\n    return { status: 200, response: resp };\n  } catch (err) {\n    err.function = "createtodoService";\n    throw err;\n  }\n};\n\nexports.gettodosService = async (db, params, user) => {\n  try {\n    let alltodos = await db\n      .collection("Todo")\n      .orderBy("createdAtTimestamp", "desc")\n      .get();\n    let Todos = [];\n    alltodos.forEach(doc => {\n      Todos.push({\n        id: doc.id,\n        ...doc.data()\n      });\n    });\n    return { status: 200, response: Todos };\n  } catch (err) {\n    err.function = "gettodosService";\n    throw err;\n  }\n};\n\nexports.gettodoByIdService = async (db, params, user) => {\n  try {\n    let Todo = await db\n      .collection("Todo")\n      .doc(params.TodoId)\n      .get();\n    if (!Todo.exists) {\n      return { status: 404, response: { error: "Todo not found" } };\n    }\n    return { status: 200, response: { ...Todo.data(), id: Todo.id } };\n  } catch (err) {\n    err.function = "gettodoByIdService";\n    throw err;\n  }\n};\n\nexports.edittodoService = async (db, params, user) => {\n  try {\n    let date = new Date();\n    const edittodo = {\n      name: params.name,\n      description: params.description,\n      username: user.username,\n      status: params.status,\n      updatedAt: date.toUTCString(),\n      updatedAtTimestamp: date.getTime()\n    };\n    //validation\n    let validationErrors = [];\n    //Name\n    const nameValidation = validateName(params.name);\n    if (!nameValidation.valid) {\n      validationErrors.push(nameValidation);\n    }\n    //Throw Error\n    if (validationErrors.length > 0) {\n      throw { error: validationErrors, function: "createTodoService" };\n    }\n\n    let Todo = await db.doc(`/Todo/${params.TodoId}`).get();\n    if (!Todo.exists) {\n      return { status: 404, response: { error: "Todo not found" } };\n    }\n    await Todo.ref.update(edittodo);\n    return { status: 200, response: edittodo };\n  } catch (err) {\n    err.function = "edittodoService";\n    throw err;\n  }\n};\n\nexports.deletetodoService = async (db, params, user) => {\n  try {\n    const Todo = db.doc(`/Todo/${params.TodoId}`);\n    const doc = await Todo.get();\n    if (!doc.exists) {\n      return { status: 404, response: { error: "Todo not found" } };\n    }\n    await Todo.delete();\n    return { status: 200, response: { id: doc.id, message: "Todo deleted" } };\n  } catch (err) {\n    err.function = "deletetodoService";\n    throw err;\n  }\n};',
    folder: 'functions/handlers/todo/',
    name: 'todo_service.js',
    objId: 'JIhznYzLPseaFV7FmxVC',
    appId: '4jOfLfzb0vUIptM0mBo1',
    type: 'service',
    createdAtTimestamp: 1580062787038,
    username: 'user5',
    createdAt: 'Sun, 26 Jan 2020 18:19:47 GMT',
    description: 'Todo Service Code' },
  { id: 'EfJhr1xOpxvc10Bg6fhK',
    description: 'Todo Service Code Tests',
    code:
     'var admin = require("firebase-admin");\n\nvar serviceAccount = require("../../../util/creds.json");\n\nadmin.initializeApp({\n  credential: admin.credential.cert(serviceAccount),\n  databaseURL: "http://databaseurl"\n});\nconst db = admin.firestore();\n\nconst {\n  createtodoService,\n  gettodosService,\n  gettodoByIdService,\n  edittodoService,\n  deletetodoService\n} = require("../Todo_service");\n\nlet createtodoTest = async () => {\n  const params = {\n    name: "test Todo",\n    description: "test Todo desc",\n    status: "status value"\n  };\n  const user = {\n    username: "user5"\n  };\n  try {\n    let resp = await createtodoService(db, params, user);\n    console.log(resp);\n    return resp.response.id;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nlet gettodosTest = async () => {\n  try {\n    const params = {\n    };\n    const user = {\n      username: "user5"\n    };\n    let resp = await gettodosService(db, params, user);\n    console.log(resp);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nlet gettodoByIdTest = async TodoId => {\n  try {\n    const params = {\n      TodoId: TodoId\n    };\n    let resp = await gettodoByIdService(db, params);\n    console.log(resp);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nlet edittodoTest = async TodoId => {\n  const params = {\n    name: "test Todo edited",\n    description: "test Todo desc edited",\n    TodoId: TodoId,\n    status: "status value"\n  };\n  try {\n    const user = {\n      username: "user5"\n    };\n    let resp = await edittodoService(db, params, user);\n    console.log(resp);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nlet deletetodoTest = async TodoId => {\n  const params = {\n    TodoId: TodoId\n  };\n  try {\n    let resp = await deletetodoService(db, params);\n    console.log(resp);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nlet run = async () => {\n  console.log("Create todo");\n  let TodoId = await createtodoTest();\n  console.log("Get todos");\n  await gettodosTest();\n  console.log("Get todo by Id");\n  await gettodoByIdTest(TodoId);\n  console.log("Edit todo");\n  await edittodoTest(TodoId);\n  console.log("Delete todo");\n  await deletetodoTest(TodoId);\n};\n\nrun();',
    folder: 'functions/handlers/todo/tests/',
    name: 'todo_service_tests.js',
    objId: 'JIhznYzLPseaFV7FmxVC',
    appId: '4jOfLfzb0vUIptM0mBo1',
    type: 'test',
    createdAtTimestamp: 1580062787038,
    username: 'user5',
    createdAt: 'Sun, 26 Jan 2020 18:19:47 GMT' } ]
Get Code by Id Run
200
OK
{ username: 'user5',
  createdAt: 'Sun, 26 Jan 2020 18:28:32 GMT',
  description: 'just a new code',
  code: 'code value',
  folder: 'folder value',
  name: 'new Code 1',
  objId: 'objId value',
  appId: 'appId value',
  type: 'type value',
  createdAtTimestamp: 1580063312130,
  id: 'VMSkyMadzi5ufS0Z7wXq' }
Edit Code Run
200
OK
{ name: 'new Code 2',
  description: 'just a new code edited',
  username: 'user5',
  appId: 'appId value',
  objId: 'objId value',
  code: 'code value',
  folder: 'folder value',
  type: 'type value',
  updatedAt: 'Sun, 26 Jan 2020 18:28:35 GMT',
  updatedAtTimestamp: 1580063315289 }
Delete Code Run
200
OK
{ id: 'VMSkyMadzi5ufS0Z7wXq', message: 'code deleted' }
Delete Code by App Run
200
OK
{ message: 'codes deleted' }
Create Code by App Run
